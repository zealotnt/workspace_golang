package main

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/sha256"
	"fmt"
	"hash"
	"io"
	"math/big"

	"github.com/davecgh/go-spew/spew"
)

func revertEndianess(input []byte) []byte {
	out := []byte{}
	max_len := len(input) - 1
	for idx, _ := range input {
		out = append(out, input[max_len-idx])
	}

	return out
}

func ReturnFixPublicKey(X_bytes []byte, Y_bytes []byte) *ecdsa.PublicKey {
	ecdsa_PubKey := ecdsa.PublicKey{
		X: big.NewInt(0),
		Y: big.NewInt(0),
	}
	ecdsa_PubKey.Curve = elliptic.P256()
	ecdsa_PubKey.X.SetBytes(X_bytes)
	ecdsa_PubKey.Y.SetBytes(Y_bytes)

	test_X := big.NewInt(0)
	test_X.SetBytes(X_bytes)
	test_Y := big.NewInt(0)
	test_Y.SetBytes(Y_bytes)
	fmt.Println("On curve =>", elliptic.P256().IsOnCurve(test_X, test_Y))

	return &ecdsa_PubKey
}

func main() {
	spew.Config.Indent = "\t"

	msg := "abc"

	r_KAT_signature := []byte{0xCB, 0x28, 0xE0, 0x99, 0x9B, 0x9C, 0x77, 0x15,
		0xFD, 0x0A, 0x80, 0xD8, 0xE4, 0x7A, 0x77, 0x07,
		0x97, 0x16, 0xCB, 0xBF, 0x91, 0x7D, 0xD7, 0x2E,
		0x97, 0x56, 0x6E, 0xA1, 0xC0, 0x66, 0x95, 0x7C}
	s_KAT_signature := []byte{0x86, 0xFA, 0x3B, 0xB4, 0xE2, 0x6C, 0xAD, 0x5B,
		0xF9, 0x0B, 0x7F, 0x81, 0x89, 0x92, 0x56, 0xCE,
		0x75, 0x94, 0xBB, 0x1E, 0xA0, 0xC8, 0x92, 0x12,
		0x74, 0x8B, 0xFF, 0x3B, 0x3D, 0x5B, 0x03, 0x15}

	x_pubkey := []byte{0x24, 0x42, 0xA5, 0xCC, 0x0E, 0xCD, 0x01, 0x5F,
		0xA3, 0xCA, 0x31, 0xDC, 0x8E, 0x2B, 0xBC, 0x70,
		0xBF, 0x42, 0xD6, 0x0C, 0xBC, 0xA2, 0x00, 0x85,
		0xE0, 0x82, 0x2C, 0xB0, 0x42, 0x35, 0xE9, 0x70}
	y_pubkey := []byte{0x6F, 0xC9, 0x8B, 0xD7, 0xE5, 0x02, 0x11, 0xA4,
		0xA2, 0x71, 0x02, 0xFA, 0x35, 0x49, 0xDF, 0x79,
		0xEB, 0xCB, 0x4B, 0xF2, 0x46, 0xB8, 0x09, 0x45,
		0xCD, 0xDF, 0xE7, 0xD5, 0x09, 0xBB, 0xFD, 0x7D}

	r_KAT_signature = revertEndianess(r_KAT_signature)
	s_KAT_signature = revertEndianess(s_KAT_signature)
	// x_pubkey = revertEndianess(x_pubkey)
	// y_pubkey = revertEndianess(y_pubkey)

	pubkey := ReturnFixPublicKey(x_pubkey, y_pubkey)
	spew.Dump(pubkey)

	// Sign ecdsa style
	var h hash.Hash
	h = sha256.New()
	io.WriteString(h, msg)
	signhash := h.Sum(nil)

	s_test := big.NewInt(0)
	r_test := big.NewInt(0)
	s_test.SetBytes(s_KAT_signature)
	r_test.SetBytes(r_KAT_signature)

	// Verify
	verifystatus := ecdsa.Verify(pubkey, signhash, r_test, s_test)
	fmt.Println("Signature verify =>", verifystatus) // should be true
}
